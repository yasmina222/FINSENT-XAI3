"""
Basic Tests for FINSENT-XAI
Verifies that all components are properly installed and functioning
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import unittest
import torch
import numpy as np
from pathlib import Path
import json
import requests
import time


class TestSystemSetup(unittest.TestCase):
    """Test that all required packages are installed"""
    
    def test_imports(self):
        """Test all critical imports"""
        try:
            import transformers
            import lime
            import shap
            import fastapi
            import streamlit
            import pandas
            import plotly
            print("✓ All core packages imported successfully")
        except ImportError as e:
            self.fail(f"Missing package: {e}")
            
    def test_transformers_version(self):
        """Check transformers library version"""
        import transformers
        version = transformers.__version__
        print(f"✓ Transformers version: {version}")
        self.assertTrue(version >= "4.0.0")
        
    def test_cuda_availability(self):
        """Check if CUDA is available (not required but good to know)"""
        if torch.cuda.is_available():
            print(f"✓ CUDA available: {torch.cuda.get_device_name(0)}")
        else:
            print("ℹ CUDA not available - will use CPU (slower but works)")
            

class TestDataPaths(unittest.TestCase):
    """Test that required directories exist"""
    
    def setUp(self):
        self.base_path = Path(__file__).parent.parent
        
    def test_directory_structure(self):
        """Verify directory structure"""
        required_dirs = [
            'data/raw',
            'data/processed',
            'data/models',
            'src/ml',
            'src/api',
            'src/dashboard',
            'src/utils',
            'src/scrapers'
        ]
        
        for dir_path in required_dirs:
            full_path = self.base_path / dir_path
            if not full_path.exists():
                full_path.mkdir(parents=True, exist_ok=True)
                print(f"ℹ Created missing directory: {dir_path}")
            else:
                print(f"✓ Directory exists: {dir_path}")
                

class TestModelLoading(unittest.TestCase):
    """Test model loading capabilities"""
    
    def test_finbert_base_loading(self):
        """Test loading base FinBERT model"""
        try:
            from transformers import AutoTokenizer, AutoModelForSequenceClassification
            
            print("Loading base FinBERT model...")
            tokenizer = AutoTokenizer.from_pretrained("ProsusAI/finbert")
            model = AutoModelForSequenceClassification.from_pretrained("ProsusAI/finbert")
            
            # Test inference
            text = "Barclays profits increased significantly"
            inputs = tokenizer(text, return_tensors="pt", truncation=True, max_length=512)
            
            with torch.no_grad():
                outputs = model(**inputs)
                
            print("✓ FinBERT model loaded and working")
            
        except Exception as e:
            self.fail(f"Failed to load FinBERT: {e}")
            

class TestComponents(unittest.TestCase):
    """Test individual components"""
    
    def test_uk_finance_utils(self):
        """Test UK finance utilities"""
        try:
            from utils.uk_finance_utils import UKFinanceUtils
            
            utils = UKFinanceUtils()
            
            # Test company standardization
            text = "Barclays Bank reported strong earnings"
            result = utils.standardize_company_name(text)
            self.assertIn("Barclays", result)
            
            # Test currency standardization
            text = "Profit of £1.2bn exceeded expectations"
            standardized, extractions = utils.standardize_currency(text)
            self.assertTrue(len(extractions) > 0)
            self.assertEqual(extractions[0]['value_gbp'], 1.2e9)
            
            print("✓ UK Finance Utils working correctly")
            
        except Exception as e:
            self.fail(f"UK Finance Utils error: {e}")
            
    def test_attention_extractor(self):
        """Test attention extraction"""
        try:
            from ml.attention_extractor import AttentionExtractor
            
            # Use base model if fine-tuned not available
            model_path = "data/models/finbert-uk-final"
            if not Path(model_path).exists():
                model_path = "ProsusAI/finbert"
                
            extractor = AttentionExtractor(model_path)
            
            # Test extraction
            text = "FTSE 100 rises on positive earnings"
            attention_data = extractor.extract_attention(text)
            
            self.assertIsNotNone(attention_data.tokens)
            self.assertIsNotNone(attention_data.attention_weights)
            
            print("✓ Attention Extractor working correctly")
            
        except Exception as e:
            print(f"⚠ Attention Extractor warning: {e}")
            print("  (This is okay if you haven't trained the model yet)")
            

class TestAPI(unittest.TestCase):
    """Test API endpoints"""
    
    @classmethod
    def setUpClass(cls):
        """Check if API is running"""
        cls.api_url = "http://localhost:8000"
        cls.api_available = False
        
        try:
            response = requests.get(f"{cls.api_url}/health", timeout=2)
            if response.status_code == 200:
                cls.api_available = True
                print("✓ API is running")
        except:
            print("ℹ API not running - skipping API tests")
            print("  To test API: python src/api/main.py")
            
    def test_health_endpoint(self):
        """Test API health endpoint"""
        if not self.api_available:
            self.skipTest("API not running")
            
        response = requests.get(f"{self.api_url}/health")
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        self.assertIn('status', data)
        self.assertIn('models_loaded', data)
        
    def test_analyze_endpoint(self):
        """Test sentiment analysis endpoint"""
        if not self.api_available:
            self.skipTest("API not running")
            
        payload = {
            "text": "Barclays profits surge amid strong UK economy",
            "include_explanations": False
        }
        
        response = requests.post(f"{self.api_url}/analyze", json=payload)
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        self.assertIn('sentiment', data)
        self.assertIn('confidence', data)
        self.assertIn(data['sentiment'], ['positive', 'negative', 'neutral'])
        

class TestEndToEnd(unittest.TestCase):
    """Simple end-to-end functionality test"""
    
    def test_sample_analysis(self):
        """Test analyzing a sample text"""
        try:
            from ml.lime_explainer import FinancialLimeExplainer
            
            # Use base model
            explainer = FinancialLimeExplainer("ProsusAI/finbert")
            
            # Test text
            text = "FTSE 100 index rises 2% on strong banking sector performance"
            
            # Get prediction
            proba = explainer._predict_proba([text])[0]
            sentiment_idx = np.argmax(proba)
            sentiment = explainer.labels[sentiment_idx]
            confidence = proba[sentiment_idx]
            
            print(f"\n✓ Sample Analysis Result:")
            print(f"  Text: {text}")
            print(f"  Sentiment: {sentiment}")
            print(f"  Confidence: {confidence:.2%}")
            
            self.assertIn(sentiment, ['positive', 'negative', 'neutral'])
            self.assertGreater(confidence, 0.3)  # Should have some confidence
            
        except Exception as e:
            print(f"⚠ End-to-end test warning: {e}")
            

def run_system_check():
    """Run all system checks"""
    print("\n" + "="*60)
    print("FINSENT-XAI SYSTEM CHECK")
    print("="*60 + "\n")
    
    # Create test suite
    suite = unittest.TestSuite()
    
    # Add tests in order
    test_classes = [
        TestSystemSetup,
        TestDataPaths,
        TestModelLoading,
        TestComponents,
        TestAPI,
        TestEndToEnd
    ]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        suite.addTests(tests)
    
    # Run tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # Summary
    print("\n" + "="*60)
    print("SYSTEM CHECK SUMMARY")
    print("="*60)
    
    if result.wasSuccessful():
        print("\n✅ All tests passed! System is ready.")
        print("\nNext steps:")
        print("1. Run scraper: python src/scrapers/uk_news_scraper.py")
        print("2. Train model: python src/ml/finbert_trainer.py")
        print("3. Start API: python src/api/main.py")
        print("4. Launch dashboard: streamlit run src/dashboard/app.py")
    else:
        print(f"\n⚠ {len(result.failures)} test(s) failed")
        print("Please check the errors above and fix any issues.")
        
    return result.wasSuccessful()


if __name__ == "__main__":
    success = run_system_check()
    sys.exit(0 if success else 1)